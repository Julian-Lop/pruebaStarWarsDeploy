{"ast":null,"code":"import { GET_ALL_FILMS, GET_ALL_STARSHIPS, GET_ALL_VEHICLES, RESET_STATE, GET_ALL_PEOPLE, GET_CHARACTERS_BY_FILM, GET_ALL_PLANETS, STARSHIPS_FOR_MAPING, VEHICLES_FOR_MAPING } from \"../Actions/types\";\nconst initialState = {\n  films: [],\n  starships: [],\n  vehicles: [],\n  characters: [],\n  planets: [],\n  starshipsformaping: [],\n  vehiclesformpaing: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case GET_ALL_FILMS:\n      return { ...state,\n        films: payload\n      };\n\n    case GET_ALL_STARSHIPS:\n      return { ...state,\n        starships: payload\n      };\n\n    case GET_ALL_VEHICLES:\n      return { ...state,\n        vehicles: payload\n      };\n\n    case RESET_STATE:\n      if (payload === 'vehicles') {\n        return { ...state,\n          vehicles: []\n        };\n      } else {\n        return { ...state,\n          starships: []\n        };\n      }\n\n    case GET_ALL_PEOPLE:\n      return { ...state,\n        characters: [...state.characters.concat(payload)]\n      };\n\n    case GET_CHARACTERS_BY_FILM:\n      state.characters.map(character => {\n        character.films.map(filmcharact => {\n          let indexFilm = Number(filmcharact.substr(-2, 1));\n\n          if (!state.films.results[indexFilm - 1].people) {\n            state.films.results[indexFilm - 1].people = [];\n          }\n\n          state.films.results[indexFilm - 1].people.push(character);\n        });\n      });\n      return { ...state\n      };\n\n    case GET_ALL_PLANETS:\n      return { ...state,\n        planets: [...state.planets.concat(payload)]\n      };\n\n    case STARSHIPS_FOR_MAPING:\n      return { ...state,\n        starshipsformaping: [...state.starshipsformaping.concat(payload)]\n      };\n\n    case VEHICLES_FOR_MAPING:\n      return { ...state,\n        vehiclesformpaing: [...state.vehiclesformpaing.concat(payload)]\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/FULL STACK/proyectos/pruebaStarWars-OnClick/front-starwars/src/Redux/Reducer/index.js"],"names":["GET_ALL_FILMS","GET_ALL_STARSHIPS","GET_ALL_VEHICLES","RESET_STATE","GET_ALL_PEOPLE","GET_CHARACTERS_BY_FILM","GET_ALL_PLANETS","STARSHIPS_FOR_MAPING","VEHICLES_FOR_MAPING","initialState","films","starships","vehicles","characters","planets","starshipsformaping","vehiclesformpaing","rootReducer","state","type","payload","concat","map","character","filmcharact","indexFilm","Number","substr","results","people","push"],"mappings":"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","sourcesContent":["import {\r\n    GET_ALL_FILMS,\r\n    GET_ALL_STARSHIPS,\r\n    GET_ALL_VEHICLES,\r\n    RESET_STATE,\r\n    GET_ALL_PEOPLE,\r\n    GET_CHARACTERS_BY_FILM,\r\n    GET_ALL_PLANETS,\r\n    STARSHIPS_FOR_MAPING,\r\n    VEHICLES_FOR_MAPING\r\n} from \"../Actions/types\" \r\n\r\nconst initialState = {\r\n    films : [],\r\n    starships : [],\r\n    vehicles : [],\r\n    characters : [],\r\n    planets : [],\r\n    starshipsformaping : [],\r\n    vehiclesformpaing : []\r\n}\r\n\r\nexport default function rootReducer(state = initialState, {type, payload}){\r\n    switch(type){\r\n        case GET_ALL_FILMS:\r\n            return{\r\n                ...state,\r\n                films : payload\r\n            }\r\n        \r\n        case GET_ALL_STARSHIPS:\r\n            return{\r\n                ...state,\r\n                starships : payload\r\n            }\r\n        \r\n        case GET_ALL_VEHICLES:\r\n            return{\r\n                ...state,\r\n                vehicles : payload\r\n            }\r\n\r\n        case RESET_STATE:\r\n            if(payload === 'vehicles'){\r\n                return{\r\n                    ...state,\r\n                    vehicles : []\r\n                }\r\n            }else{\r\n                return{\r\n                    ...state,\r\n                    starships : []\r\n                }\r\n            }\r\n        \r\n        case GET_ALL_PEOPLE:\r\n            return{\r\n                ...state,\r\n                characters : [...state.characters.concat(payload)]\r\n            }\r\n        \r\n        case GET_CHARACTERS_BY_FILM:\r\n\r\n            state.characters.map(character => {\r\n                character.films.map(filmcharact => {\r\n                    let indexFilm = Number(filmcharact.substr(-2,1))\r\n                    if(!state.films.results[indexFilm-1].people){\r\n                        state.films.results[indexFilm-1].people = []\r\n                    } \r\n                    state.films.results[indexFilm-1].people.push(character)\r\n                    \r\n                })\r\n            })\r\n            return{\r\n                ...state\r\n            }\r\n        \r\n        case GET_ALL_PLANETS:\r\n            return{\r\n                ...state,\r\n                planets : [...state.planets.concat(payload)]\r\n            }\r\n        \r\n        case STARSHIPS_FOR_MAPING:\r\n            return{\r\n                ...state,\r\n                starshipsformaping : [...state.starshipsformaping.concat(payload)]\r\n            }\r\n        \r\n        case VEHICLES_FOR_MAPING:\r\n            return{\r\n                ...state,\r\n                vehiclesformpaing : [...state.vehiclesformpaing.concat(payload)]\r\n            }\r\n\r\n        default:\r\n        return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}