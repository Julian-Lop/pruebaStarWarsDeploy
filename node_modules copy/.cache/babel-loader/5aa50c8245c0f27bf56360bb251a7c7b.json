{"ast":null,"code":"import { GET_ALL_FILMS, GET_ALL_STARSHIPS, GET_ALL_VEHICLES, RESET_STATE, GET_ALL_PEOPLE, GET_CHARACTERS_BY_FILM } from \"../Actions/types\";\nconst initialState = {\n  films: [],\n  starships: [],\n  vehicles: [],\n  characters: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case GET_ALL_FILMS:\n      return { ...state,\n        films: payload\n      };\n\n    case GET_ALL_STARSHIPS:\n      return { ...state,\n        starships: payload\n      };\n\n    case GET_ALL_VEHICLES:\n      return { ...state,\n        vehicles: payload\n      };\n\n    case RESET_STATE:\n      if (payload === 'vehicles') {\n        return { ...state,\n          vehicles: []\n        };\n      } else {\n        return { ...state,\n          starships: []\n        };\n      }\n\n    case GET_ALL_PEOPLE:\n      if (state.characters.length > 1) {\n        state.characters = [...state.characters, payload];\n        let charactersMap = state.characters.map(item => {\n          return [item.name, item];\n        });\n        var charactersMapArr = new Map(charactersMap);\n        let uniquecharacters = [...charactersMapArr.values()];\n        return { ...state,\n          characters: uniquecharacters\n        };\n      }\n\n      return { ...state,\n        characters: [...state.characters, payload]\n      };\n\n    case GET_CHARACTERS_BY_FILM:\n      state.characters.map(character => {\n        character.films.map(filmcharact => {\n          let indexFilm = Number(filmcharact.substr(-1));\n          state.films.results[indexFilm] = { ...results,\n            'people': character\n          };\n        });\n      });\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/FULL STACK/proyectos/pruebaStarWars-OnClick/front-starwars/src/Redux/Reducer/index.js"],"names":["GET_ALL_FILMS","GET_ALL_STARSHIPS","GET_ALL_VEHICLES","RESET_STATE","GET_ALL_PEOPLE","GET_CHARACTERS_BY_FILM","initialState","films","starships","vehicles","characters","rootReducer","state","type","payload","length","charactersMap","map","item","name","charactersMapArr","Map","uniquecharacters","values","character","filmcharact","indexFilm","Number","substr","results"],"mappings":"AAAA,SACIA,aADJ,EAEIC,iBAFJ,EAGIC,gBAHJ,EAIIC,WAJJ,EAKIC,cALJ,EAMIC,sBANJ,QAOO,kBAPP;AASA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAG,EADS;AAEjBC,EAAAA,SAAS,EAAG,EAFK;AAGjBC,EAAAA,QAAQ,EAAG,EAHM;AAIjBC,EAAAA,UAAU,EAAG;AAJI,CAArB;AAOA,eAAe,SAASC,WAAT,GAA2D;AAAA,MAAtCC,KAAsC,uEAA9BN,YAA8B;AAAA,MAAhB;AAACO,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAgB;;AACtE,UAAOD,IAAP;AACI,SAAKb,aAAL;AACI,aAAM,EACF,GAAGY,KADD;AAEFL,QAAAA,KAAK,EAAGO;AAFN,OAAN;;AAKJ,SAAKb,iBAAL;AACI,aAAM,EACF,GAAGW,KADD;AAEFJ,QAAAA,SAAS,EAAGM;AAFV,OAAN;;AAKJ,SAAKZ,gBAAL;AACI,aAAM,EACF,GAAGU,KADD;AAEFH,QAAAA,QAAQ,EAAGK;AAFT,OAAN;;AAKJ,SAAKX,WAAL;AACI,UAAGW,OAAO,KAAK,UAAf,EAA0B;AACtB,eAAM,EACF,GAAGF,KADD;AAEFH,UAAAA,QAAQ,EAAG;AAFT,SAAN;AAIH,OALD,MAKK;AACD,eAAM,EACF,GAAGG,KADD;AAEFJ,UAAAA,SAAS,EAAG;AAFV,SAAN;AAIH;;AAEL,SAAKJ,cAAL;AACI,UAAGQ,KAAK,CAACF,UAAN,CAAiBK,MAAjB,GAA0B,CAA7B,EAA+B;AAC3BH,QAAAA,KAAK,CAACF,UAAN,GAAmB,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBI,OAAtB,CAAnB;AAEA,YAAIE,aAAa,GAAGJ,KAAK,CAACF,UAAN,CAAiBO,GAAjB,CAAqBC,IAAI,IAAE;AAC3C,iBAAO,CAACA,IAAI,CAACC,IAAN,EAAWD,IAAX,CAAP;AACH,SAFmB,CAApB;AAGA,YAAIE,gBAAgB,GAAG,IAAIC,GAAJ,CAAQL,aAAR,CAAvB;AAEA,YAAIM,gBAAgB,GAAG,CAAC,GAAGF,gBAAgB,CAACG,MAAjB,EAAJ,CAAvB;AACA,eAAM,EACF,GAAGX,KADD;AAEFF,UAAAA,UAAU,EAAGY;AAFX,SAAN;AAIH;;AACD,aAAM,EACF,GAAGV,KADD;AAEFF,QAAAA,UAAU,EAAG,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBI,OAAtB;AAFX,OAAN;;AAKJ,SAAKT,sBAAL;AACIO,MAAAA,KAAK,CAACF,UAAN,CAAiBO,GAAjB,CAAqBO,SAAS,IAAI;AAC9BA,QAAAA,SAAS,CAACjB,KAAV,CAAgBU,GAAhB,CAAoBQ,WAAW,IAAI;AAC/B,cAAIC,SAAS,GAAGC,MAAM,CAACF,WAAW,CAACG,MAAZ,CAAmB,CAAC,CAApB,CAAD,CAAtB;AACAhB,UAAAA,KAAK,CAACL,KAAN,CAAYsB,OAAZ,CAAoBH,SAApB,IAAiC,EAAC,GAAGG,OAAJ;AAAa,sBAASL;AAAtB,WAAjC;AACH,SAHD;AAIH,OALD;AAMA,aAAM,EACF,GAAGZ;AADD,OAAN;;AAGJ;AACA,aAAOA,KAAP;AA/DJ;AAiEH","sourcesContent":["import {\r\n    GET_ALL_FILMS,\r\n    GET_ALL_STARSHIPS,\r\n    GET_ALL_VEHICLES,\r\n    RESET_STATE,\r\n    GET_ALL_PEOPLE,\r\n    GET_CHARACTERS_BY_FILM\r\n} from \"../Actions/types\" \r\n\r\nconst initialState = {\r\n    films : [],\r\n    starships : [],\r\n    vehicles : [],\r\n    characters : []\r\n}\r\n\r\nexport default function rootReducer(state = initialState, {type, payload}){\r\n    switch(type){\r\n        case GET_ALL_FILMS:\r\n            return{\r\n                ...state,\r\n                films : payload\r\n            }\r\n        \r\n        case GET_ALL_STARSHIPS:\r\n            return{\r\n                ...state,\r\n                starships : payload\r\n            }\r\n        \r\n        case GET_ALL_VEHICLES:\r\n            return{\r\n                ...state,\r\n                vehicles : payload\r\n            }\r\n\r\n        case RESET_STATE:\r\n            if(payload === 'vehicles'){\r\n                return{\r\n                    ...state,\r\n                    vehicles : []\r\n                }\r\n            }else{\r\n                return{\r\n                    ...state,\r\n                    starships : []\r\n                }\r\n            }\r\n        \r\n        case GET_ALL_PEOPLE:\r\n            if(state.characters.length > 1){\r\n                state.characters = [...state.characters, payload]\r\n\r\n                let charactersMap = state.characters.map(item=>{\r\n                    return [item.name,item]\r\n                });\r\n                var charactersMapArr = new Map(charactersMap); \r\n                \r\n                let uniquecharacters = [...charactersMapArr.values()]\r\n                return{\r\n                    ...state,\r\n                    characters : uniquecharacters\r\n                }\r\n            }\r\n            return{\r\n                ...state,\r\n                characters : [...state.characters, payload]\r\n            }\r\n        \r\n        case GET_CHARACTERS_BY_FILM:\r\n            state.characters.map(character => {\r\n                character.films.map(filmcharact => {\r\n                    let indexFilm = Number(filmcharact.substr(-1))\r\n                    state.films.results[indexFilm] = {...results, 'people':character}\r\n                })\r\n            })\r\n            return{\r\n                ...state\r\n            }\r\n        default:\r\n        return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}